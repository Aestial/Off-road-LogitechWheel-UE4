// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

PRAGMA_DISABLE_DEPRECATION_WARNINGS
struct FDeviceState;
#ifdef LOGITECHWHEELPLUGIN_LogitechBPLibrary_generated_h
#error "LogitechBPLibrary.generated.h already included, missing '#pragma once' in LogitechBPLibrary.h"
#endif
#define LOGITECHWHEELPLUGIN_LogitechBPLibrary_generated_h

#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execWheelGetState) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FDeviceState*)Z_Param__Result=ULogitechBPLibrary::WheelGetState(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelShutdown) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		ULogitechBPLibrary::WheelShutdown(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayLeds) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_currentRPM); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_rpmFirstLedTurnsOn); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_rpmRedLine); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayLeds(Z_Param_index,Z_Param_currentRPM,Z_Param_rpmFirstLedTurnsOn,Z_Param_rpmRedLine); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGetOperatingRange) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_range); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelGetOperatingRange(Z_Param_index,Z_Param_Out_range); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelSetOperatingRange) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_range); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelSetOperatingRange(Z_Param_index,Z_Param_range); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGetShifterMode) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=ULogitechBPLibrary::WheelGetShifterMode(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSoftstopForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSoftstopForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySoftstopForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_usableRangePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySoftstopForce(Z_Param_index,Z_Param_usableRangePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopCarAirborne) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopCarAirborne(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayCarAirborne) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayCarAirborne(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSurfaceEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSurfaceEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySurfaceEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_type); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_GET_PROPERTY(UIntProperty,Z_Param_period); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySurfaceEffect(Z_Param_index,Z_Param_type,Z_Param_magnitudePercentage,Z_Param_period); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSlipperyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSlipperyRoadEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySlipperyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySlipperyRoadEffect(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopBumpyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopBumpyRoadEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayBumpyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayBumpyRoadEffect(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopDirtRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopDirtRoadEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayDirtRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayDirtRoadEffect(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayFrontalCollisionForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayFrontalCollisionForce(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySideCollisionForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySideCollisionForce(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopDamperForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopDamperForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayDamperForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_coefficientPercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayDamperForce(Z_Param_index,Z_Param_coefficientPercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopConstantForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopConstantForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayConstantForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayConstantForce(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSpringForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSpringForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySpringForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_offsetPercentage); \
		P_GET_PROPERTY(UIntProperty,Z_Param_saturationPercentage); \
		P_GET_PROPERTY(UIntProperty,Z_Param_coefficientPercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySpringForce(Z_Param_index,Z_Param_offsetPercentage,Z_Param_saturationPercentage,Z_Param_coefficientPercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsPlaying) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_forceType); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsPlaying(Z_Param_index,Z_Param_forceType); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelHasForceFeedback) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelHasForceFeedback(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGetNonLinearValue) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_inputValue); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=ULogitechBPLibrary::WheelGetNonLinearValue(Z_Param_index,Z_Param_inputValue); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGenerateNonLinearValues) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_nonLinCoeff); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelGenerateNonLinearValues(Z_Param_index,Z_Param_nonLinCoeff); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelButtonIsPressed) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_buttonNbr); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelButtonIsPressed(Z_Param_index,Z_Param_buttonNbr); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelButtonReleased) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_buttonNbr); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelButtonReleased(Z_Param_index,Z_Param_buttonNbr); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelButtonTriggered) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_buttonNbr); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelButtonTriggered(Z_Param_index,Z_Param_buttonNbr); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsModelConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_modelName); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsModelConnected(Z_Param_index,Z_Param_modelName); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsManufacturerConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_manufacturerName); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsManufacturerConnected(Z_Param_index,Z_Param_manufacturerName); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsDeviceConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_deviceType); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsDeviceConnected(Z_Param_index,Z_Param_deviceType); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsConnected(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelUpdate) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelUpdate(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelInit) \
	{ \
		P_GET_UBOOL(Z_Param_ignoreXInputControllers); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelInit(Z_Param_ignoreXInputControllers); \
		P_NATIVE_END; \
	}


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execWheelGetState) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FDeviceState*)Z_Param__Result=ULogitechBPLibrary::WheelGetState(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelShutdown) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		ULogitechBPLibrary::WheelShutdown(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayLeds) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_currentRPM); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_rpmFirstLedTurnsOn); \
		P_GET_PROPERTY(UFloatProperty,Z_Param_rpmRedLine); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayLeds(Z_Param_index,Z_Param_currentRPM,Z_Param_rpmFirstLedTurnsOn,Z_Param_rpmRedLine); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGetOperatingRange) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY_REF(UIntProperty,Z_Param_Out_range); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelGetOperatingRange(Z_Param_index,Z_Param_Out_range); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelSetOperatingRange) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_range); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelSetOperatingRange(Z_Param_index,Z_Param_range); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGetShifterMode) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=ULogitechBPLibrary::WheelGetShifterMode(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSoftstopForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSoftstopForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySoftstopForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_usableRangePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySoftstopForce(Z_Param_index,Z_Param_usableRangePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopCarAirborne) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopCarAirborne(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayCarAirborne) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayCarAirborne(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSurfaceEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSurfaceEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySurfaceEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_type); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_GET_PROPERTY(UIntProperty,Z_Param_period); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySurfaceEffect(Z_Param_index,Z_Param_type,Z_Param_magnitudePercentage,Z_Param_period); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSlipperyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSlipperyRoadEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySlipperyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySlipperyRoadEffect(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopBumpyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopBumpyRoadEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayBumpyRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayBumpyRoadEffect(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopDirtRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopDirtRoadEffect(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayDirtRoadEffect) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayDirtRoadEffect(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayFrontalCollisionForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayFrontalCollisionForce(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySideCollisionForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySideCollisionForce(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopDamperForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopDamperForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayDamperForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_coefficientPercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayDamperForce(Z_Param_index,Z_Param_coefficientPercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopConstantForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopConstantForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlayConstantForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_magnitudePercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlayConstantForce(Z_Param_index,Z_Param_magnitudePercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelStopSpringForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelStopSpringForce(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelPlaySpringForce) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_offsetPercentage); \
		P_GET_PROPERTY(UIntProperty,Z_Param_saturationPercentage); \
		P_GET_PROPERTY(UIntProperty,Z_Param_coefficientPercentage); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelPlaySpringForce(Z_Param_index,Z_Param_offsetPercentage,Z_Param_saturationPercentage,Z_Param_coefficientPercentage); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsPlaying) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_forceType); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsPlaying(Z_Param_index,Z_Param_forceType); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelHasForceFeedback) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelHasForceFeedback(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGetNonLinearValue) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_inputValue); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(int32*)Z_Param__Result=ULogitechBPLibrary::WheelGetNonLinearValue(Z_Param_index,Z_Param_inputValue); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelGenerateNonLinearValues) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_nonLinCoeff); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelGenerateNonLinearValues(Z_Param_index,Z_Param_nonLinCoeff); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelButtonIsPressed) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_buttonNbr); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelButtonIsPressed(Z_Param_index,Z_Param_buttonNbr); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelButtonReleased) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_buttonNbr); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelButtonReleased(Z_Param_index,Z_Param_buttonNbr); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelButtonTriggered) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_buttonNbr); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelButtonTriggered(Z_Param_index,Z_Param_buttonNbr); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsModelConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_modelName); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsModelConnected(Z_Param_index,Z_Param_modelName); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsManufacturerConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_manufacturerName); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsManufacturerConnected(Z_Param_index,Z_Param_manufacturerName); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsDeviceConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_GET_PROPERTY(UIntProperty,Z_Param_deviceType); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsDeviceConnected(Z_Param_index,Z_Param_deviceType); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelIsConnected) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_index); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelIsConnected(Z_Param_index); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelUpdate) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelUpdate(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execWheelInit) \
	{ \
		P_GET_UBOOL(Z_Param_ignoreXInputControllers); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(bool*)Z_Param__Result=ULogitechBPLibrary::WheelInit(Z_Param_ignoreXInputControllers); \
		P_NATIVE_END; \
	}


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesULogitechBPLibrary(); \
	friend LOGITECHWHEELPLUGIN_API class UClass* Z_Construct_UClass_ULogitechBPLibrary(); \
	public: \
	DECLARE_CLASS(ULogitechBPLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/LogitechWheelPlugin"), NO_API) \
	DECLARE_SERIALIZER(ULogitechBPLibrary) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_INCLASS \
	private: \
	static void StaticRegisterNativesULogitechBPLibrary(); \
	friend LOGITECHWHEELPLUGIN_API class UClass* Z_Construct_UClass_ULogitechBPLibrary(); \
	public: \
	DECLARE_CLASS(ULogitechBPLibrary, UBlueprintFunctionLibrary, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/LogitechWheelPlugin"), NO_API) \
	DECLARE_SERIALIZER(ULogitechBPLibrary) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ULogitechBPLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ULogitechBPLibrary) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ULogitechBPLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ULogitechBPLibrary); \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API ULogitechBPLibrary(ULogitechBPLibrary&&); \
	NO_API ULogitechBPLibrary(const ULogitechBPLibrary&); \
public:


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ULogitechBPLibrary(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API ULogitechBPLibrary(ULogitechBPLibrary&&); \
	NO_API ULogitechBPLibrary(const ULogitechBPLibrary&); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ULogitechBPLibrary); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ULogitechBPLibrary); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ULogitechBPLibrary)


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_PRIVATE_PROPERTY_OFFSET
#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_30_PROLOG
#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_PRIVATE_PROPERTY_OFFSET \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_RPC_WRAPPERS \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_INCLASS \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_PRIVATE_PROPERTY_OFFSET \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_RPC_WRAPPERS_NO_PURE_DECLS \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_INCLASS_NO_PURE_DECLS \
	Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h_33_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class LogitechBPLibrary."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Contrabando_Plugins_LogitechWheelPlugin_Source_LogitechWheelPlugin_Private_LogitechBPLibrary_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
