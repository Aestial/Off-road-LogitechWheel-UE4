// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Private/LogitechWheelPluginPrivatePCH.h"
#include "LogitechWheelPlugin.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1LogitechWheelPlugin() {}
	void ULogitechBPLibrary::StaticRegisterNativesULogitechBPLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelButtonIsPressed",(Native)&ULogitechBPLibrary::execWheelButtonIsPressed);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelButtonReleased",(Native)&ULogitechBPLibrary::execWheelButtonReleased);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelButtonTriggered",(Native)&ULogitechBPLibrary::execWheelButtonTriggered);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelGenerateNonLinearValues",(Native)&ULogitechBPLibrary::execWheelGenerateNonLinearValues);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelGetNonLinearValue",(Native)&ULogitechBPLibrary::execWheelGetNonLinearValue);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelGetOperatingRange",(Native)&ULogitechBPLibrary::execWheelGetOperatingRange);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelGetShifterMode",(Native)&ULogitechBPLibrary::execWheelGetShifterMode);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelGetState",(Native)&ULogitechBPLibrary::execWheelGetState);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelHasForceFeedback",(Native)&ULogitechBPLibrary::execWheelHasForceFeedback);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelInit",(Native)&ULogitechBPLibrary::execWheelInit);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelIsConnected",(Native)&ULogitechBPLibrary::execWheelIsConnected);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelIsDeviceConnected",(Native)&ULogitechBPLibrary::execWheelIsDeviceConnected);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelIsManufacturerConnected",(Native)&ULogitechBPLibrary::execWheelIsManufacturerConnected);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelIsModelConnected",(Native)&ULogitechBPLibrary::execWheelIsModelConnected);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelIsPlaying",(Native)&ULogitechBPLibrary::execWheelIsPlaying);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayBumpyRoadEffect",(Native)&ULogitechBPLibrary::execWheelPlayBumpyRoadEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayCarAirborne",(Native)&ULogitechBPLibrary::execWheelPlayCarAirborne);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayConstantForce",(Native)&ULogitechBPLibrary::execWheelPlayConstantForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayDamperForce",(Native)&ULogitechBPLibrary::execWheelPlayDamperForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayDirtRoadEffect",(Native)&ULogitechBPLibrary::execWheelPlayDirtRoadEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayFrontalCollisionForce",(Native)&ULogitechBPLibrary::execWheelPlayFrontalCollisionForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlayLeds",(Native)&ULogitechBPLibrary::execWheelPlayLeds);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlaySideCollisionForce",(Native)&ULogitechBPLibrary::execWheelPlaySideCollisionForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlaySlipperyRoadEffect",(Native)&ULogitechBPLibrary::execWheelPlaySlipperyRoadEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlaySoftstopForce",(Native)&ULogitechBPLibrary::execWheelPlaySoftstopForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlaySpringForce",(Native)&ULogitechBPLibrary::execWheelPlaySpringForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelPlaySurfaceEffect",(Native)&ULogitechBPLibrary::execWheelPlaySurfaceEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelSetOperatingRange",(Native)&ULogitechBPLibrary::execWheelSetOperatingRange);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelShutdown",(Native)&ULogitechBPLibrary::execWheelShutdown);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopBumpyRoadEffect",(Native)&ULogitechBPLibrary::execWheelStopBumpyRoadEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopCarAirborne",(Native)&ULogitechBPLibrary::execWheelStopCarAirborne);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopConstantForce",(Native)&ULogitechBPLibrary::execWheelStopConstantForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopDamperForce",(Native)&ULogitechBPLibrary::execWheelStopDamperForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopDirtRoadEffect",(Native)&ULogitechBPLibrary::execWheelStopDirtRoadEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopSlipperyRoadEffect",(Native)&ULogitechBPLibrary::execWheelStopSlipperyRoadEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopSoftstopForce",(Native)&ULogitechBPLibrary::execWheelStopSoftstopForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopSpringForce",(Native)&ULogitechBPLibrary::execWheelStopSpringForce);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelStopSurfaceEffect",(Native)&ULogitechBPLibrary::execWheelStopSurfaceEffect);
		FNativeFunctionRegistrar::RegisterFunction(ULogitechBPLibrary::StaticClass(), "WheelUpdate",(Native)&ULogitechBPLibrary::execWheelUpdate);
	}
	IMPLEMENT_CLASS(ULogitechBPLibrary, 2593915027);
class UScriptStruct* FDeviceState::StaticStruct()
{
	extern LOGITECHWHEELPLUGIN_API class UPackage* Z_Construct_UPackage__Script_LogitechWheelPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern LOGITECHWHEELPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FDeviceState();
		extern LOGITECHWHEELPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FDeviceState_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDeviceState, Z_Construct_UPackage__Script_LogitechWheelPlugin(), TEXT("DeviceState"), sizeof(FDeviceState), Get_Z_Construct_UScriptStruct_FDeviceState_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDeviceState(FDeviceState::StaticStruct, TEXT("/Script/LogitechWheelPlugin"), TEXT("DeviceState"), false, nullptr, nullptr);
static struct FScriptStruct_LogitechWheelPlugin_StaticRegisterNativesFDeviceState
{
	FScriptStruct_LogitechWheelPlugin_StaticRegisterNativesFDeviceState()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DeviceState")),new UScriptStruct::TCppStructOps<FDeviceState>);
	}
} ScriptStruct_LogitechWheelPlugin_StaticRegisterNativesFDeviceState;
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();

	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonIsPressed();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonReleased();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonTriggered();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGenerateNonLinearValues();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetNonLinearValue();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetOperatingRange();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetShifterMode();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetState();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelHasForceFeedback();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelInit();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsConnected();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsDeviceConnected();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsManufacturerConnected();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsModelConnected();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsPlaying();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayBumpyRoadEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayCarAirborne();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayConstantForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDamperForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDirtRoadEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayFrontalCollisionForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayLeds();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySideCollisionForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySlipperyRoadEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySoftstopForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySpringForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySurfaceEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelSetOperatingRange();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelShutdown();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopBumpyRoadEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopCarAirborne();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopConstantForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDamperForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDirtRoadEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSlipperyRoadEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSoftstopForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSpringForce();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSurfaceEffect();
	LOGITECHWHEELPLUGIN_API class UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelUpdate();
	LOGITECHWHEELPLUGIN_API class UClass* Z_Construct_UClass_ULogitechBPLibrary_NoRegister();
	LOGITECHWHEELPLUGIN_API class UClass* Z_Construct_UClass_ULogitechBPLibrary();
	LOGITECHWHEELPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FDeviceState();
	LOGITECHWHEELPLUGIN_API class UPackage* Z_Construct_UPackage__Script_LogitechWheelPlugin();
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonIsPressed()
	{
		struct LogitechBPLibrary_eventWheelButtonIsPressed_Parms
		{
			int32 index;
			int32 buttonNbr;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelButtonIsPressed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelButtonIsPressed_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelButtonIsPressed_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelButtonIsPressed_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelButtonIsPressed_Parms), sizeof(bool), true);
			UProperty* NewProp_buttonNbr = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("buttonNbr"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(buttonNbr, LogitechBPLibrary_eventWheelButtonIsPressed_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelButtonIsPressed_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Wheel Button Pressed"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering button pressed"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if on the device connected at index is currently being pressed the button specified"));
			MetaData->SetValue(NewProp_buttonNbr, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonReleased()
	{
		struct LogitechBPLibrary_eventWheelButtonReleased_Parms
		{
			int32 index;
			int32 buttonNbr;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelButtonReleased"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelButtonReleased_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelButtonReleased_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelButtonReleased_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelButtonReleased_Parms), sizeof(bool), true);
			UProperty* NewProp_buttonNbr = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("buttonNbr"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(buttonNbr, LogitechBPLibrary_eventWheelButtonReleased_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelButtonReleased_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Wheel Button Released"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering button released"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if on the device connected at index has been released the button specified"));
			MetaData->SetValue(NewProp_buttonNbr, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonTriggered()
	{
		struct LogitechBPLibrary_eventWheelButtonTriggered_Parms
		{
			int32 index;
			int32 buttonNbr;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelButtonTriggered"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelButtonTriggered_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelButtonTriggered_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelButtonTriggered_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelButtonTriggered_Parms), sizeof(bool), true);
			UProperty* NewProp_buttonNbr = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("buttonNbr"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(buttonNbr, LogitechBPLibrary_eventWheelButtonTriggered_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelButtonTriggered_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Wheel Button Triggered"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering button triggered"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if the device connected at index is currently triggering the button specified"));
			MetaData->SetValue(NewProp_buttonNbr, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGenerateNonLinearValues()
	{
		struct LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms
		{
			int32 index;
			int32 nonLinCoeff;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelGenerateNonLinearValues"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms), sizeof(bool), true);
			UProperty* NewProp_nonLinCoeff = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("nonLinCoeff"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(nonLinCoeff, LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelGenerateNonLinearValues_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wheel Generate Non Linear Values"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The WheelGenerateNonLinearValues () function generate non-linear values for the game controller's axis."));
			MetaData->SetValue(NewProp_nonLinCoeff, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetNonLinearValue()
	{
		struct LogitechBPLibrary_eventWheelGetNonLinearValue_Parms
		{
			int32 index;
			int32 inputValue;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelGetNonLinearValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelGetNonLinearValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(ReturnValue, LogitechBPLibrary_eventWheelGetNonLinearValue_Parms), 0x0010000000000580);
			UProperty* NewProp_inputValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("inputValue"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(inputValue, LogitechBPLibrary_eventWheelGetNonLinearValue_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelGetNonLinearValue_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wheel Get Non Linear Values"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The WheelGetNonLinearValue () function returns a non-linear value from a table previously generated. This can be  used for the response of a steering wheel."));
			MetaData->SetValue(NewProp_inputValue, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetOperatingRange()
	{
		struct LogitechBPLibrary_eventWheelGetOperatingRange_Parms
		{
			int32 index;
			int32 range;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelGetOperatingRange"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(LogitechBPLibrary_eventWheelGetOperatingRange_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelGetOperatingRange_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelGetOperatingRange_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelGetOperatingRange_Parms), sizeof(bool), true);
			UProperty* NewProp_range = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("range"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(range, LogitechBPLibrary_eventWheelGetOperatingRange_Parms), 0x0010000000000180);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelGetOperatingRange_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Wheel Operating Range"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering operating range"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Fills the range parameter of the controller with the current controller operating range\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       range : integer to receive the current operating range\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetShifterMode()
	{
		struct LogitechBPLibrary_eventWheelGetShifterMode_Parms
		{
			int32 index;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelGetShifterMode"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelGetShifterMode_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(ReturnValue, LogitechBPLibrary_eventWheelGetShifterMode_Parms), 0x0010000000000580);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelGetShifterMode_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Wheel Shifter Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering shift mode"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets current shifter mode (gated or sequential)\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       Return Value\n               1 if shifter is gated,  0 if shifter is sequential,  -1 if unknown"));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelGetState()
	{
		struct LogitechBPLibrary_eventWheelGetState_Parms
		{
			int32 index;
			FDeviceState ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelGetState"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelGetState_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, LogitechBPLibrary_eventWheelGetState_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FDeviceState());
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelGetState_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Wheel State"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering state"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the state of the controller"));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelHasForceFeedback()
	{
		struct LogitechBPLibrary_eventWheelHasForceFeedback_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelHasForceFeedback"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelHasForceFeedback_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelHasForceFeedback_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelHasForceFeedback_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelHasForceFeedback_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelHasForceFeedback_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wheel Has Force Feedback"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if the controller at index has force feedback"));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelInit()
	{
		struct LogitechBPLibrary_eventWheelInit_Parms
		{
			bool ignoreXInputControllers;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelInit"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelInit_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelInit_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelInit_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelInit_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ignoreXInputControllers, LogitechBPLibrary_eventWheelInit_Parms, bool);
			UProperty* NewProp_ignoreXInputControllers = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ignoreXInputControllers"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ignoreXInputControllers, LogitechBPLibrary_eventWheelInit_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(ignoreXInputControllers, LogitechBPLibrary_eventWheelInit_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Initialize Wheel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering initialize"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The Wheel will automatically try to initialize"));
			MetaData->SetValue(NewProp_ignoreXInputControllers, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsConnected()
	{
		struct LogitechBPLibrary_eventWheelIsConnected_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelIsConnected"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelIsConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelIsConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelIsConnected_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelIsConnected_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelIsConnected_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Wheel Connected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering connected"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether a wheel is connected at the provided index. index 0 = first controller"));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsDeviceConnected()
	{
		struct LogitechBPLibrary_eventWheelIsDeviceConnected_Parms
		{
			int32 index;
			int32 deviceType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelIsDeviceConnected"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelIsDeviceConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelIsDeviceConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelIsDeviceConnected_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelIsDeviceConnected_Parms), sizeof(bool), true);
			UProperty* NewProp_deviceType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("deviceType"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(deviceType, LogitechBPLibrary_eventWheelIsDeviceConnected_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelIsDeviceConnected_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Logitech Device Connected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering connected"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns whether a logitech device is connected at the provided index. index 0 = first controller.\n       Device Types\n               0 = Wheel\n               1 = Joystick\n               2 = Gamepad\n               3 = Other"));
			MetaData->SetValue(NewProp_deviceType, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsManufacturerConnected()
	{
		struct LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms
		{
			int32 index;
			int32 manufacturerName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelIsManufacturerConnected"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms), sizeof(bool), true);
			UProperty* NewProp_manufacturerName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("manufacturerName"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(manufacturerName, LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelIsManufacturerConnected_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Wheel Manufacturer Connected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering connected"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if the device connected at index is made from the manufacturer specified by manufacturerName\n       Manufacturer Names\n               0 = Logitech\n               1 = Microsoft\n               2 = Other"));
			MetaData->SetValue(NewProp_manufacturerName, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsModelConnected()
	{
		struct LogitechBPLibrary_eventWheelIsModelConnected_Parms
		{
			int32 index;
			int32 modelName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelIsModelConnected"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelIsModelConnected_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelIsModelConnected_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelIsModelConnected_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelIsModelConnected_Parms), sizeof(bool), true);
			UProperty* NewProp_modelName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("modelName"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(modelName, LogitechBPLibrary_eventWheelIsModelConnected_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelIsModelConnected_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Wheel Model Connected"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering connected model"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if the device connected at index is the model specified.\n      Model Names\n              0 = G27                                 5 = Driving Force Pro           10 = Force 3D Pro               15 = Strice Force 3D    20 = Rumblepad 2                        25 = Chillstream\n              1 = Driving Force GT    6 = Driving Force                       11 = Extreme 3D Pro             16 = G940 Joystick              21 = Cordless Rumblepad 2       26 = G29\n              2 = G25                                 7 = Nascar Racing Wheel         12 = Freedom 24                 17 = G940 Throttle              22 = Cordless Gamepad           27 = G920\n              3 = Momo Racing                 8 = Formula Force                       13 = Attack 3                   18 = G940 Pedals                23 = Dual Action Gamepad\n              4 = Momo Force                  9 = Formula Force GP            14 = Force 3D                   19 = Rumblepad                  24 = Precision Gamepad 2"));
			MetaData->SetValue(NewProp_modelName, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelIsPlaying()
	{
		struct LogitechBPLibrary_eventWheelIsPlaying_Parms
		{
			int32 index;
			int32 forceType;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelIsPlaying"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelIsPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelIsPlaying_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelIsPlaying_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelIsPlaying_Parms), sizeof(bool), true);
			UProperty* NewProp_forceType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("forceType"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(forceType, LogitechBPLibrary_eventWheelIsPlaying_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelIsPlaying_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Wheel Is Playing"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback playing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Checks if a certain force effect is currently playing.\n\n       True if the LogiIsPlaying device can do force feedback, false otherwise.\n\n       Force Types\n               0 = Spring                              5 = Dirt Road\n               1 = Constant                    6 = Bumpy Road\n               2 = Damper                              7 = Slippery Road\n               3 = Side Collision              8 = Surface Effect\n               4 = Frontal Collision   9 = Car Airborne"));
			MetaData->SetValue(NewProp_forceType, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayBumpyRoadEffect()
	{
		struct LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms
		{
			int32 index;
			int32 magnitudePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayBumpyRoadEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayBumpyRoadEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Bumpy Road Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback bumpy road"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the bumpy road effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       magnitudePercentage : Specifies the magnitude of the bumpy road effect.  Valid ranges for magnitudePercentage are 0 to 100. Values higher than 100 are silently clamped.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayCarAirborne()
	{
		struct LogitechBPLibrary_eventWheelPlayCarAirborne_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayCarAirborne"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayCarAirborne_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayCarAirborne_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayCarAirborne_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayCarAirborne_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayCarAirborne_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Car Airborne Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback airborne"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the car airborne effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayConstantForce()
	{
		struct LogitechBPLibrary_eventWheelPlayConstantForce_Parms
		{
			int32 index;
			int32 magnitudePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayConstantForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayConstantForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayConstantForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayConstantForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayConstantForce_Parms), sizeof(bool), true);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlayConstantForce_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayConstantForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Constant Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback constant"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the constant force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       magnitudePercentage : Specifies the magnitude of the constant force effect. A negative value reverses the direction of the force.\n       Valid ranges for magnitudePercentage are -100 to 100. Any values outside the valid range are silently clamped.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDamperForce()
	{
		struct LogitechBPLibrary_eventWheelPlayDamperForce_Parms
		{
			int32 index;
			int32 coefficientPercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayDamperForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayDamperForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayDamperForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayDamperForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayDamperForce_Parms), sizeof(bool), true);
			UProperty* NewProp_coefficientPercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("coefficientPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(coefficientPercentage, LogitechBPLibrary_eventWheelPlayDamperForce_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayDamperForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Damper Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback damper"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the damper force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       coefficientPercentage : specify the slope of the effect strength increase relative to the amount of deflection from the center of the condition.\n       Higher values mean that the saturation level is reached sooner.  Valid ranges are -100 to 100. Any value outside the valid range is silently clamped.\n       -100 simulates a very slippery effect, +100 makes the wheel/joystick very hard to move, simulating the car at a stop or in mud.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_coefficientPercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDirtRoadEffect()
	{
		struct LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms
		{
			int32 index;
			int32 magnitudePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayDirtRoadEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayDirtRoadEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Dirt Road Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback dirt road"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the dirt road effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       magnitudePercentage : Specifies the magnitude of the dirt road effect.  Valid ranges for magnitudePercentage are 0 to 100. Values higher than 100 are silently clamped.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayFrontalCollisionForce()
	{
		struct LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms
		{
			int32 index;
			int32 magnitudePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayFrontalCollisionForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms), sizeof(bool), true);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayFrontalCollisionForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Frontal Collision Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback frontal collision"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the frontal collision force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       magnitudePercentage : specifies the magnitude of the frontal collision force effect.  Valid ranges for magnitudePercentage are 0 to 100. Values higher than 100 are silently clamped.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayLeds()
	{
		struct LogitechBPLibrary_eventWheelPlayLeds_Parms
		{
			int32 index;
			float currentRPM;
			float rpmFirstLedTurnsOn;
			float rpmRedLine;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlayLeds"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlayLeds_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlayLeds_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlayLeds_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlayLeds_Parms), sizeof(bool), true);
			UProperty* NewProp_rpmRedLine = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("rpmRedLine"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(rpmRedLine, LogitechBPLibrary_eventWheelPlayLeds_Parms), 0x0010000000000082);
			UProperty* NewProp_rpmFirstLedTurnsOn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("rpmFirstLedTurnsOn"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(rpmFirstLedTurnsOn, LogitechBPLibrary_eventWheelPlayLeds_Parms), 0x0010000000000082);
			UProperty* NewProp_currentRPM = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("currentRPM"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(currentRPM, LogitechBPLibrary_eventWheelPlayLeds_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlayLeds_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel LEDS"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering leds"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the leds on the controller\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       currentRPM  : current RPM\n\n       rpmFirstLedTurnsOn : RPM when first LEDs are to turn on.\n\n       rpmRedLine : just below this RPM, all LEDs will be on. Just above,  all LEDs will start flashing.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_rpmRedLine, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_rpmFirstLedTurnsOn, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_currentRPM, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySideCollisionForce()
	{
		struct LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms
		{
			int32 index;
			int32 magnitudePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlaySideCollisionForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms), sizeof(bool), true);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlaySideCollisionForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Side Collision Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback side collision"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the side collision force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       magnitudePercentage : Specifies the magnitude of the side collision force effect. A negative value reverses the direction of the force. Valid ranges for magnitudePercentage are -100 to 100.\n       Any values outside the valid range are silently clamped.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySlipperyRoadEffect()
	{
		struct LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms
		{
			int32 index;
			int32 magnitudePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlaySlipperyRoadEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlaySlipperyRoadEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Slippery Road Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback slippery road"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the slippery road effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       magnitudePercentage : Specifies the magnitude of the slippery road effect.  Valid ranges for magnitudePercentage are 0 to 100. 100 corresponds to the most slippery effect.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySoftstopForce()
	{
		struct LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms
		{
			int32 index;
			int32 usableRangePercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlaySoftstopForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms), sizeof(bool), true);
			UProperty* NewProp_usableRangePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("usableRangePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(usableRangePercentage, LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlaySoftstopForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Soft Stop Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback soft stop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the soft stop force.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       usableRangePercentage : specifies the deadband in percentage of the softstop force effect.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_usableRangePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySpringForce()
	{
		struct LogitechBPLibrary_eventWheelPlaySpringForce_Parms
		{
			int32 index;
			int32 offsetPercentage;
			int32 saturationPercentage;
			int32 coefficientPercentage;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlaySpringForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlaySpringForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlaySpringForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlaySpringForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlaySpringForce_Parms), sizeof(bool), true);
			UProperty* NewProp_coefficientPercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("coefficientPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(coefficientPercentage, LogitechBPLibrary_eventWheelPlaySpringForce_Parms), 0x0010000000000082);
			UProperty* NewProp_saturationPercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("saturationPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(saturationPercentage, LogitechBPLibrary_eventWheelPlaySpringForce_Parms), 0x0010000000000082);
			UProperty* NewProp_offsetPercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("offsetPercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(offsetPercentage, LogitechBPLibrary_eventWheelPlaySpringForce_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlaySpringForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Spring Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback spring"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the spring force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       offsetPercentage: Specifies the center of the spring force effect. Valid range is -100 to 100. Specifying 0 centers the spring. Any values outside this range are silently clamped.\n\n       saturationPercentage: Specify the level of saturation of the spring force effect. The saturation stays constant after a certain deflection from the center of the spring.\n       It is comparable to a magnitude.  Valid ranges are 0 to 100. Any value higher than 100 is silently clamped.\n\n       coefficientPercentage - Specify the slope of the effect strength increase relative to the amount of deflection from the center of the condition.\n       Higher values mean that the saturation level is  reached sooner.  Valid ranges are -100 to 100. Any value outside the valid range is silently clamped.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_coefficientPercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_saturationPercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_offsetPercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySurfaceEffect()
	{
		struct LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms
		{
			int32 index;
			int32 type;
			int32 magnitudePercentage;
			int32 period;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelPlaySurfaceEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_period = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("period"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(period, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms), 0x0010000000000082);
			UProperty* NewProp_magnitudePercentage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitudePercentage"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(magnitudePercentage, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms), 0x0010000000000082);
			UProperty* NewProp_type = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("type"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(type, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelPlaySurfaceEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Play Wheel Surface Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback surface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Plays the surface effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       type : Specifies the type of force effect. Can be one of the  following values:\n               o LOGI_PERIODICTYPE_SINE\n               o LOGI_PERIODICTYPE_SQUARE\n               o LOGI_PERIODICTYPE_TRIANGLE\n\n       magnitudePercentage - Specifies the magnitude of the surface effect.  Valid ranges for magnitudePercentage are 0 to 100. Values higher than 100 are silently clamped.\n\n       period - Specifies the period of the periodic force effect. The value is the duration for one full cycle of the periodic function measured in milliseconds.\n       A good range of values for the period is  20 ms (sand) to 120 ms (wooden bridge or cobblestones). For a surface effect the period should not be any bigger than 150 ms.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_period, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_magnitudePercentage, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_type, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelSetOperatingRange()
	{
		struct LogitechBPLibrary_eventWheelSetOperatingRange_Parms
		{
			int32 index;
			int32 range;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelSetOperatingRange"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelSetOperatingRange_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelSetOperatingRange_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelSetOperatingRange_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelSetOperatingRange_Parms), sizeof(bool), true);
			UProperty* NewProp_range = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("range"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(range, LogitechBPLibrary_eventWheelSetOperatingRange_Parms), 0x0010000000000082);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelSetOperatingRange_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Wheel Operating Range"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering operating range"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the operating range of the controller with the range parameter\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       range : the operating range to be set\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_range, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelShutdown()
	{
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelShutdown"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Shutdown Wheel"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering shutdown"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("shuts down the SDK and destroys the controller objects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopBumpyRoadEffect()
	{
		struct LogitechBPLibrary_eventWheelStopBumpyRoadEffect_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopBumpyRoadEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopBumpyRoadEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopBumpyRoadEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopBumpyRoadEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopBumpyRoadEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopBumpyRoadEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Bumpy Road Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback bumpy road"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the bumpy road effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopCarAirborne()
	{
		struct LogitechBPLibrary_eventWheelStopCarAirborne_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopCarAirborne"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopCarAirborne_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopCarAirborne_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopCarAirborne_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopCarAirborne_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopCarAirborne_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Car Airborne Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback airborne"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the car airborne effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopConstantForce()
	{
		struct LogitechBPLibrary_eventWheelStopConstantForce_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopConstantForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopConstantForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopConstantForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopConstantForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopConstantForce_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopConstantForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Constant Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback constant"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the constant force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDamperForce()
	{
		struct LogitechBPLibrary_eventWheelStopDamperForce_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopDamperForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopDamperForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopDamperForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopDamperForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopDamperForce_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopDamperForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Damper Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback damper"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the damper force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDirtRoadEffect()
	{
		struct LogitechBPLibrary_eventWheelStopDirtRoadEffect_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopDirtRoadEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopDirtRoadEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopDirtRoadEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopDirtRoadEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopDirtRoadEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopDirtRoadEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Dirt Road Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback dirt road"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the dirt road effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSlipperyRoadEffect()
	{
		struct LogitechBPLibrary_eventWheelStopSlipperyRoadEffect_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopSlipperyRoadEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopSlipperyRoadEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopSlipperyRoadEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopSlipperyRoadEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopSlipperyRoadEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopSlipperyRoadEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Slippery Road Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback slippery road"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the slippery road effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSoftstopForce()
	{
		struct LogitechBPLibrary_eventWheelStopSoftstopForce_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopSoftstopForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopSoftstopForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopSoftstopForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopSoftstopForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopSoftstopForce_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopSoftstopForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Soft Stop Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback soft stop"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the soft stop force.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSpringForce()
	{
		struct LogitechBPLibrary_eventWheelStopSpringForce_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopSpringForce"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopSpringForce_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopSpringForce_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopSpringForce_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopSpringForce_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopSpringForce_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Spring Force"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback spring"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the spring force\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSurfaceEffect()
	{
		struct LogitechBPLibrary_eventWheelStopSurfaceEffect_Parms
		{
			int32 index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelStopSurfaceEffect"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelStopSurfaceEffect_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelStopSurfaceEffect_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelStopSurfaceEffect_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelStopSurfaceEffect_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(index, LogitechBPLibrary_eventWheelStopSurfaceEffect_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Wheel Surface Effect"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering force feedback surface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Stops the surface effect.\n\n       index : index of the game controller.  Index 0 corresponds to the first game controller connected. Index 1 to the second game controller.\n\n       True if success, false otherwise."));
			MetaData->SetValue(NewProp_index, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ULogitechBPLibrary_WheelUpdate()
	{
		struct LogitechBPLibrary_eventWheelUpdate_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ULogitechBPLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WheelUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(LogitechBPLibrary_eventWheelUpdate_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, LogitechBPLibrary_eventWheelUpdate_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, LogitechBPLibrary_eventWheelUpdate_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, LogitechBPLibrary_eventWheelUpdate_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("LogitechBPLibrary"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Update Wheel State"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("LogitechBPLibrary wheel steering update state"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("The Wheel State is automatically updated every frame in LogitechWheelInputDevice.cpp"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ULogitechBPLibrary_NoRegister()
	{
		return ULogitechBPLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_ULogitechBPLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_LogitechWheelPlugin();
			OuterClass = ULogitechBPLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonIsPressed());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonReleased());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonTriggered());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelGenerateNonLinearValues());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetNonLinearValue());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetOperatingRange());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetShifterMode());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetState());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelHasForceFeedback());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelInit());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsDeviceConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsManufacturerConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsModelConnected());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsPlaying());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayBumpyRoadEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayCarAirborne());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayConstantForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDamperForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDirtRoadEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayFrontalCollisionForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayLeds());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySideCollisionForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySlipperyRoadEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySoftstopForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySpringForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySurfaceEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelSetOperatingRange());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelShutdown());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopBumpyRoadEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopCarAirborne());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopConstantForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDamperForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDirtRoadEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSlipperyRoadEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSoftstopForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSpringForce());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSurfaceEffect());
				OuterClass->LinkChild(Z_Construct_UFunction_ULogitechBPLibrary_WheelUpdate());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonIsPressed(), "WheelButtonIsPressed"); // 1386200605
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonReleased(), "WheelButtonReleased"); // 3422873612
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelButtonTriggered(), "WheelButtonTriggered"); // 4284095542
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelGenerateNonLinearValues(), "WheelGenerateNonLinearValues"); // 3931623740
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetNonLinearValue(), "WheelGetNonLinearValue"); // 4165061563
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetOperatingRange(), "WheelGetOperatingRange"); // 1830485868
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetShifterMode(), "WheelGetShifterMode"); // 2016866372
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelGetState(), "WheelGetState"); // 148120287
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelHasForceFeedback(), "WheelHasForceFeedback"); // 365574065
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelInit(), "WheelInit"); // 4169045595
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsConnected(), "WheelIsConnected"); // 2116562711
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsDeviceConnected(), "WheelIsDeviceConnected"); // 2384710471
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsManufacturerConnected(), "WheelIsManufacturerConnected"); // 3066291396
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsModelConnected(), "WheelIsModelConnected"); // 3503644505
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelIsPlaying(), "WheelIsPlaying"); // 436066689
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayBumpyRoadEffect(), "WheelPlayBumpyRoadEffect"); // 2459576563
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayCarAirborne(), "WheelPlayCarAirborne"); // 1615548500
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayConstantForce(), "WheelPlayConstantForce"); // 778487365
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDamperForce(), "WheelPlayDamperForce"); // 1431111824
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayDirtRoadEffect(), "WheelPlayDirtRoadEffect"); // 292904983
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayFrontalCollisionForce(), "WheelPlayFrontalCollisionForce"); // 2310596200
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlayLeds(), "WheelPlayLeds"); // 3442134024
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySideCollisionForce(), "WheelPlaySideCollisionForce"); // 2571787184
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySlipperyRoadEffect(), "WheelPlaySlipperyRoadEffect"); // 376451699
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySoftstopForce(), "WheelPlaySoftstopForce"); // 667232406
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySpringForce(), "WheelPlaySpringForce"); // 3007282631
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelPlaySurfaceEffect(), "WheelPlaySurfaceEffect"); // 2874078641
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelSetOperatingRange(), "WheelSetOperatingRange"); // 1586119725
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelShutdown(), "WheelShutdown"); // 631097884
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopBumpyRoadEffect(), "WheelStopBumpyRoadEffect"); // 535314736
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopCarAirborne(), "WheelStopCarAirborne"); // 4124982885
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopConstantForce(), "WheelStopConstantForce"); // 805096858
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDamperForce(), "WheelStopDamperForce"); // 678866056
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopDirtRoadEffect(), "WheelStopDirtRoadEffect"); // 1672939728
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSlipperyRoadEffect(), "WheelStopSlipperyRoadEffect"); // 1686099481
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSoftstopForce(), "WheelStopSoftstopForce"); // 3637249100
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSpringForce(), "WheelStopSpringForce"); // 753479460
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelStopSurfaceEffect(), "WheelStopSurfaceEffect"); // 3583268604
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ULogitechBPLibrary_WheelUpdate(), "WheelUpdate"); // 587723231
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("LogitechBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/LogitechBPLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("*      Function library class.\n*      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint.\n*\n*      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable.\n*      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins.\n*      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins.\n*      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu.\n*                              Its lets you name the node using characters not allowed in C++ function names.\n*      CompactNodeTitle - the word(s) that appear on the node.\n*      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu.\n*                              Good example is \"Print String\" node which you can find also by using keyword \"log\".\n*      Category -      the category your node will be under in the Blueprint drop-down menu.\n*\n*      For more info on custom blueprint nodes visit documentation:\n*      https://wiki.unrealengine.com/Custom_Blueprint_Node_Creation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ULogitechBPLibrary(Z_Construct_UClass_ULogitechBPLibrary, &ULogitechBPLibrary::StaticClass, TEXT("ULogitechBPLibrary"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ULogitechBPLibrary);
	UScriptStruct* Z_Construct_UScriptStruct_FDeviceState()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_LogitechWheelPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FDeviceState_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("DeviceState"), sizeof(FDeviceState), Get_Z_Construct_UScriptStruct_FDeviceState_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DeviceState"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDeviceState>, EStructFlags(0x00000001));
			UProperty* NewProp_rglFSlider = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("rglFSlider"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rglFSlider, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rglFSlider_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rglFSlider, TEXT("rglFSlider"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_lFRz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lFRz"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lFRz, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lFRy = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lFRy"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lFRy, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lFRx = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lFRx"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lFRx, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lFZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lFZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lFZ, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lFY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lFY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lFY, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lFX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lFX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lFX, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rglASlider = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("rglASlider"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rglASlider, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rglASlider_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rglASlider, TEXT("rglASlider"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_lARz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lARz"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lARz, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lARy = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lARy"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lARy, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lARx = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lARx"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lARx, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lAZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lAZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lAZ, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lAY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lAY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lAY, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lAX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lAX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lAX, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rglVSlider = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("rglVSlider"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rglVSlider, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rglVSlider_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rglVSlider, TEXT("rglVSlider"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_lVRz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lVRz"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lVRz, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lVRy = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lVRy"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lVRy, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lVRx = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lVRx"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lVRx, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lVZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lVZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lVZ, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lVY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lVY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lVY, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lVX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lVX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lVX, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rgbButtons = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("rgbButtons"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rgbButtons, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rgbButtons_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rgbButtons, TEXT("rgbButtons"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_rgdwPOV = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("rgdwPOV"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rgdwPOV, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rgdwPOV_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rgdwPOV, TEXT("rgdwPOV"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_rglSlider = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("rglSlider"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rglSlider, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_rglSlider_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rglSlider, TEXT("rglSlider"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_lRz = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lRz"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lRz, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lRy = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lRy"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lRy, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lRx = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lRx"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lRx, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lZ = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lZ"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lZ, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lY = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lY"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lY, FDeviceState), 0x0010000000000005);
			UProperty* NewProp_lX = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("lX"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(lX, FDeviceState), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rglFSlider, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_rglFSlider, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rglFSlider, TEXT("ToolTip"), TEXT("z-axis torque"));
			MetaData->SetValue(NewProp_lFRz, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lFRz, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lFRz, TEXT("ToolTip"), TEXT("y-axis torque"));
			MetaData->SetValue(NewProp_lFRy, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lFRy, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lFRy, TEXT("ToolTip"), TEXT("x-axis torque"));
			MetaData->SetValue(NewProp_lFRx, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lFRx, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lFRx, TEXT("ToolTip"), TEXT("z-axis force"));
			MetaData->SetValue(NewProp_lFZ, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lFZ, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lFZ, TEXT("ToolTip"), TEXT("y-axis force"));
			MetaData->SetValue(NewProp_lFY, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lFY, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lFY, TEXT("ToolTip"), TEXT("x-axis force"));
			MetaData->SetValue(NewProp_lFX, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lFX, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lFX, TEXT("ToolTip"), TEXT("extra axes accelerations"));
			MetaData->SetValue(NewProp_rglASlider, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_rglASlider, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rglASlider, TEXT("ToolTip"), TEXT("z-axis angular acceleration"));
			MetaData->SetValue(NewProp_lARz, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lARz, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lARz, TEXT("ToolTip"), TEXT("y-axis angular acceleration"));
			MetaData->SetValue(NewProp_lARy, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lARy, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lARy, TEXT("ToolTip"), TEXT("x-axis angular acceleration"));
			MetaData->SetValue(NewProp_lARx, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lARx, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lARx, TEXT("ToolTip"), TEXT("z-axis acceleration"));
			MetaData->SetValue(NewProp_lAZ, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lAZ, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lAZ, TEXT("ToolTip"), TEXT("y-axis acceleration"));
			MetaData->SetValue(NewProp_lAY, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lAY, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lAY, TEXT("ToolTip"), TEXT("x-axis acceleration"));
			MetaData->SetValue(NewProp_lAX, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lAX, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lAX, TEXT("ToolTip"), TEXT("extra axes velocities"));
			MetaData->SetValue(NewProp_rglVSlider, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_rglVSlider, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rglVSlider, TEXT("ToolTip"), TEXT("z-axis angular velocity"));
			MetaData->SetValue(NewProp_lVRz, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lVRz, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lVRz, TEXT("ToolTip"), TEXT("y-axis angular velocity"));
			MetaData->SetValue(NewProp_lVRy, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lVRy, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lVRy, TEXT("ToolTip"), TEXT("x-axis angular velocity"));
			MetaData->SetValue(NewProp_lVRx, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lVRx, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lVRx, TEXT("ToolTip"), TEXT("z-axis velocity"));
			MetaData->SetValue(NewProp_lVZ, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lVZ, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lVZ, TEXT("ToolTip"), TEXT("y-axis velocity"));
			MetaData->SetValue(NewProp_lVY, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lVY, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lVY, TEXT("ToolTip"), TEXT("x-axis velocity"));
			MetaData->SetValue(NewProp_lVX, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lVX, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lVX, TEXT("ToolTip"), TEXT("128 buttons"));
			MetaData->SetValue(NewProp_rgbButtons, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_rgbButtons, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rgbButtons, TEXT("ToolTip"), TEXT("POV directions. POV1 = Wheel Dpad"));
			MetaData->SetValue(NewProp_rgdwPOV, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_rgdwPOV, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rgdwPOV, TEXT("ToolTip"), TEXT("extra axes positions"));
			MetaData->SetValue(NewProp_rglSlider, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_rglSlider, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_rglSlider, TEXT("ToolTip"), TEXT("z-axis rotation"));
			MetaData->SetValue(NewProp_lRz, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lRz, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lRz, TEXT("ToolTip"), TEXT("y-axis rotation"));
			MetaData->SetValue(NewProp_lRy, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lRy, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lRy, TEXT("ToolTip"), TEXT("x-axis rotation"));
			MetaData->SetValue(NewProp_lRx, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lRx, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lRx, TEXT("ToolTip"), TEXT("z-axis position"));
			MetaData->SetValue(NewProp_lZ, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lZ, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lZ, TEXT("ToolTip"), TEXT("y-axis position"));
			MetaData->SetValue(NewProp_lY, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lY, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
			MetaData->SetValue(NewProp_lY, TEXT("ToolTip"), TEXT("x-axis position"));
			MetaData->SetValue(NewProp_lX, TEXT("Category"), TEXT("Logitech Wheel Plugin"));
			MetaData->SetValue(NewProp_lX, TEXT("ModuleRelativePath"), TEXT("Public/ILogitechWheelPlugin.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDeviceState_CRC() { return 3096422633U; }
	UPackage* Z_Construct_UPackage__Script_LogitechWheelPlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/LogitechWheelPlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xA414CAC7;
			Guid.B = 0x45DD613B;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
